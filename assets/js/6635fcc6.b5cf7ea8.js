(self.webpackChunkdapengdouyu=self.webpackChunkdapengdouyu||[]).push([[5069],{3905:function(t,e,n){"use strict";n.d(e,{Zo:function(){return c},kt:function(){return u}});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var s=r.createContext({}),l=function(t){var e=r.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},c=function(t){var e=l(t.components);return r.createElement(s.Provider,{value:e},t.children)},h={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,s=t.parentName,c=p(t,["components","mdxType","originalType","parentName"]),d=l(n),u=a,k=d["".concat(s,".").concat(u)]||d[u]||h[u]||i;return n?r.createElement(k,o(o({ref:e},c),{},{components:n})):r.createElement(k,o({ref:e},c))}));function u(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in e)hasOwnProperty.call(e,s)&&(p[s]=e[s]);p.originalType=t,p.mdxType="string"==typeof t?t:a,o[1]=p;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2586:function(t,e,n){"use strict";n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var r=n(4034),a=n(9973),i=(n(7294),n(3905)),o=["components"],p={},s=void 0,l={unversionedId:"books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7",id:"books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7",isDocsHomePage:!1,title:"26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7",description:"path \u8bb0\u5f55\u4e86\u904d\u5386\u8def\u5f84\uff0c\u5e76\u4e14\u8fd8\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u589e\u5220\u6539\u7684 api\uff0c\u4f1a\u5728\u904d\u5386 ast \u7684\u65f6\u5019\u4f20\u9012\u7ed9 visitor \u7684\u56de\u8c03\u51fd\u6570\u3002",source:"@site/docs/books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7.md",sourceDirName:"books/babel",slug:"/books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7",permalink:"/docs/books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7",editUrl:"https://github.com/dapengdouyu/docs/tree/master/docs/books/babel/26\u3001\u624b\u5199 Babel\uff1a traverse -- path\u7bc7.md",version:"current",lastUpdatedAt:1633773412,formattedLastUpdatedAt:"10/9/2021",frontMatter:{}},c=[{value:"\u601d\u8def\u5206\u6790",id:"\u601d\u8def\u5206\u6790",children:[]},{value:"\u4ee3\u7801\u5b9e\u73b0",id:"\u4ee3\u7801\u5b9e\u73b0",children:[{value:"\u5b9e\u73b0 path api",id:"\u5b9e\u73b0-path-api",children:[]}]},{value:"\u603b\u7ed3",id:"\u603b\u7ed3",children:[]}],h={toc:c};function d(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},h,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"path \u8bb0\u5f55\u4e86\u904d\u5386\u8def\u5f84\uff0c\u5e76\u4e14\u8fd8\u5b9e\u73b0\u4e86\u4e00\u7cfb\u5217\u589e\u5220\u6539\u7684 api\uff0c\u4f1a\u5728\u904d\u5386 ast \u7684\u65f6\u5019\u4f20\u9012\u7ed9 visitor \u7684\u56de\u8c03\u51fd\u6570\u3002"),(0,i.kt)("p",null,"\u8fd9\u8282\u6211\u4eec\u6765\u5b9e\u73b0\u4e0b path\u3002"),(0,i.kt)("h2",{id:"\u601d\u8def\u5206\u6790"},"\u601d\u8def\u5206\u6790"),(0,i.kt)("p",null,"path \u662f\u8282\u70b9\u4e4b\u95f4\u7684\u5173\u8054\uff0c\u6bcf\u4e00\u4e2a path \u8bb0\u5f55\u4e86\u5f53\u524d\u8282\u70b9\u548c\u7236\u8282\u70b9\uff0c\u5e76\u4e14 path \u548c path \u4e4b\u95f4\u4e5f\u6709\u5173\u8054\u3002"),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5883d27d78054a72a9c650023b2ba481~tplv-k3u1fbpfcp-watermark.image",alt:null})),(0,i.kt)("p",null,"\u901a\u8fc7 path \u6211\u4eec\u53ef\u4ee5\u627e\u5230\u7236\u8282\u70b9\u3001\u7236\u8282\u70b9\u7684\u7236\u8282\u70b9\uff0c\u4e00\u76f4\u5230\u6839\u8282\u70b9\u3002"),(0,i.kt)("p",null,"path \u7684\u5b9e\u73b0\u5c31\u662f\u5728 traverse \u7684\u65f6\u5019\u521b\u5efa\u4e00\u4e2a\u5bf9\u8c61\u6765\u4fdd\u5b58\u5f53\u524d\u8282\u70b9\u548c\u7236\u8282\u70b9\uff0c\u5e76\u4e14\u80fd\u591f\u62ff\u5230\u8282\u70b9\u4e5f\u5c31\u80fd\u5bf9\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u53ef\u4ee5\u57fa\u4e8e\u8282\u70b9\u6765\u63d0\u4f9b\u4e00\u7cfb\u5217\u589e\u5220\u6539\u7684 api\u3002"),(0,i.kt)("h2",{id:"\u4ee3\u7801\u5b9e\u73b0"},"\u4ee3\u7801\u5b9e\u73b0"),(0,i.kt)("p",null,"\u9996\u5148\u6211\u4eec\u521b\u5efa\u4e00\u4e2a path \u7684\u7c7b\uff0c\u8bb0\u5f55\u5f53\u524d\u8282\u70b9 node\uff0c\u7236\u8282\u70b9 parent \u4ee5\u53ca\u7236\u8282\u70b9\u7684 path\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class NodePath {\n    constructor(node, parent, parentPath) {\n        this.node = node;\n        this.parent = parent;\n        this.parentPath = parentPath;\n    }\n}\n")),(0,i.kt)("p",null,"\u7136\u540e\u5728\u904d\u5386\u7684\u65f6\u5019\u521b\u5efa path \u5bf9\u8c61\uff0c\u4f20\u5165 visitor\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"function traverse(node, visitors, parent, parentPath) {\n    const defination = astDefinationsMap.get(node.type);\n\n    let visitorFuncs = visitors[node.type] || {};\n\n    if(typeof visitorFuncs === 'function') {\n        visitorFuncs = {\n            enter: visitorFuncs\n        }\n    }\n    const path = new NodePath(node, parent, parentPath);\n\n    visitorFuncs.enter && visitorFuncs.enter(path);\n\n    if (defination.visitor) {\n        defination.visitor.forEach(key => {\n            const prop = node[key];\n            if (Array.isArray(prop)) { // \u5982\u679c\u8be5\u5c5e\u6027\u662f\u6570\u7ec4\n                prop.forEach(childNode => {\n                    traverse(childNode, visitors, node, path);\n                })\n            } else {\n                traverse(prop, visitors, node, path);\n            }\n        })\n    }\n    visitorFuncs.exit && visitorFuncs.exit(path);\n}\n")),(0,i.kt)("p",null,"\u4e4b\u540e visitor \u91cc\u9762\u5c31\u53ef\u4ee5\u62ff\u5230 path \u4e86\u3002"),(0,i.kt)("p",null,"\u6bd4\u5982\u6211\u4eec\u53ef\u4ee5\u5728 visotor \u91cc\u4ece\u5f53\u524d\u8282\u70b9\u4e00\u76f4\u67e5\u627e\u5230\u6839\u8282\u70b9\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"traverse(ast, {\n    Identifier: {\n        exit(path) {\n            path.node.name = 'b';\n            let curPath = path;\n            while (curPath) {\n                console.log(curPath.node.type);\n                curPath = curPath.parentPath;\n            }\n        }\n    }\n});\n")),(0,i.kt)("p",null,"\u63a5\u4e0b\u6765\u662f\u5b9e\u73b0 api\uff0cpath \u7684 api \u5c31\u662f\u5bf9 AST \u7684\u589e\u5220\u6539\uff0c\u6211\u4eec\u5b9e\u73b0\u4e0b replaceWith\u3001remove\u3001findParent\u3001find\u3001traverse\u3001skip \u8fd9\u4e9b api\u3002"),(0,i.kt)("h3",{id:"\u5b9e\u73b0-path-api"},"\u5b9e\u73b0 path api"),(0,i.kt)("p",null,"replaceWith \u5c31\u662f\u5728\u7236\u8282\u70b9\u66ff\u6362\u5f53\u524d\u8282\u70b9\u4e3a\u53e6\u4e00\u4e2a\u8282\u70b9\u3002\u4f46\u662f\u6211\u4eec\u73b0\u5728\u5e76\u4e0d\u77e5\u9053\u5f53\u524d\u8282\u70b9\u5728\u7236\u8282\u70b9\u7684\u4ec0\u4e48\u5c5e\u6027\u4e0a\uff0c\u6240\u4ee5\u5728\u904d\u5386\u7684\u65f6\u5019\u8981\u8bb0\u5f55\u5c5e\u6027\u540d\u7684\u4fe1\u606f\u3002"),(0,i.kt)("p",null,"\u8fd9\u91cc\u8981\u8bb0\u5f55\u4e24\u4e2a\u5c5e\u6027 key \u548c listkey\uff0c\u56e0\u4e3a\u5c5e\u6027\u53ef\u4ee5\u662f\u6570\u7ec4\uff0c\u5982\u679c\u662f\u6570\u7ec4\u7684\u8bdd\u5c31\u8981\u77e5\u9053\u662f\u4ec0\u4e48\u5c5e\u6027\u7684\u4ec0\u4e48\u4e0b\u6807\uff0c\u6bd4\u5982 params \u7684\u7b2c 2 \u4e2a\u5143\u7d20\uff0c\u8fd9\u65f6\u5019 key \u662f params \u800c listkey \u662f 2\u3002\u5982\u679c\u4e0d\u662f\u6570\u7ec4\u7684\u8bdd\uff0clistkey \u4e3a\u7a7a\u3002"),(0,i.kt)("p",null,"\u5728\u8bb2 path \u7684\u90a3\u4e00\u8282\uff0c\u6211\u4eec\u8bb2\u8fc7 key \u548c listkey\uff0c\u5f88\u591a\u540c\u5b66\u90fd\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u8981\u8bb0\u5f55\u8fd9\u4e2a\uff0c\u73b0\u5728\u5c31\u77e5\u9053\u4e86\uff0c\u662f\u4e3a\u4e86\u5b9e\u73b0\u5bf9 AST \u589e\u5220\u6539\u7684 api \u7528\u7684\u3002"),(0,i.kt)("p",null,"\u6211\u4eec\u5bf9 traverse \u7684\u5b9e\u73b0\u505a\u4e0b\u6539\u52a8\uff0c\u4f20\u5165 key \u548c\u6570\u7ec4\u4e0b\u6807\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"module.exports = function traverse(node, visitors, parent, parentPath, key, listKey) {\n\n    const defination = visitorKeys.get(node.type);\n    let visitorFuncs = visitors[node.type] || {};\n\n    if(typeof visitorFuncs === 'function') {\n        visitorFuncs = {\n            enter: visitorFuncs\n        }\n    }\n    const path = new NodePath(node, parent, parentPath, key, listKey);\n    visitorFuncs.enter && visitorFuncs.enter(path);\n\n    if (defination.visitor) {\n        defination.visitor.forEach(key => {\n            const prop = node[key];\n            if (Array.isArray(prop)) { // \u5982\u679c\u8be5\u5c5e\u6027\u662f\u6570\u7ec4\n                prop.forEach((childNode, index) => {\n                    traverse(childNode, visitors, node, path, key, index);\n                })\n            } else {\n                traverse(prop, visitors, node, path, key);\n            }\n        })\n    }\n    visitorFuncs.exit && visitorFuncs.exit(path);\n}\n")),(0,i.kt)("p",null,"path \u4e5f\u8981\u505a\u76f8\u5e94\u7684\u6539\u52a8\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"class NodePath {\n    constructor(node, parent, parentPath, key, listKey) {\n        this.node = node;\n        this.parent = parent;\n        this.parentPath = parentPath;\n        this.key = key;\n        this.listKey = listKey;\n    }\n}\n")),(0,i.kt)("h4",{id:"pathreplacewith"},"path.replaceWith"),(0,i.kt)("p",null,"\u7136\u540e\u57fa\u4e8e key \u548c listkey \u5b9e\u73b0 replaceWith \u7684 api\uff0c\u5982\u679c\u662f\u6570\u7ec4\u7684\u8bdd\uff0c\u5c31\u4fee\u6539\u90a3\u4e2a\u5143\u7d20\uff0c\u5426\u5219\u5c31\u4fee\u6539\u8be5\u5c5e\u6027\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"replaceWith(node) {\n    if (this.listKey != undefined) {\n        this.parent[this.key].splice(this.listKey, 1, node);\n    } else {\n        this.parent[this.key] = node\n    }\n}\n")),(0,i.kt)("h4",{id:"pathremove"},"path.remove"),(0,i.kt)("p",null,"\u540c\u7406\uff0cremove \u4e5f\u662f\u4e00\u6837\u7684\u601d\u8def\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"remove () {\n    if (this.listKey != undefined) {\n        this.parent[this.key].splice(this.listKey, 1);\n    } else {\n        this.parent[this.key] = null;\n    }\n}\n")),(0,i.kt)("h4",{id:"pathfind\u3001pathfindparent"},"path.find\u3001path.findParent"),(0,i.kt)("p",null,"find \u548c findParent \u662f\u987a\u7740 path \u94fe\u5411\u4e0a\u67e5\u627e AST\uff0c\u5e76\u4e14\u628a\u8282\u70b9\u4f20\u5165\u56de\u8c03\u51fd\u6570\uff0c\u5982\u679c\u627e\u5230\u4e86\u5c31\u8fd4\u56de\u8282\u70b9\u7684 path\u3002\u533a\u522b\u662f find \u5305\u542b\u5f53\u524d\u8282\u70b9\uff0cfindParent \u4e0d\u5305\u542b\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"findParent(callback) {\n    let curPath = this.parentPath;\n    while (curPath && !callback(curPath)) {\n        curPath = curPath.parentPath; \n    }\n    return curPath;\n}\nfind(callback) {\n    let curPath = this;\n    while (curPath && !callback(curPath)) {\n        curPath = curPath.parentPath; \n    }\n    return curPath;\n}\n")),(0,i.kt)("h4",{id:"pathtraverse"},"path.traverse"),(0,i.kt)("p",null,"traverse \u7684 api \u662f\u57fa\u4e8e\u4e0a\u9762\u5b9e\u73b0\u7684 traverse\uff0c\u4f46\u662f\u6709\u4e00\u70b9\u4e0d\u540c\uff0cpath.traverse \u4e0d\u9700\u8981\u518d\u904d\u5386\u5f53\u524d\u8282\u70b9\uff0c\u76f4\u63a5\u904d\u5386\u5b50\u8282\u70b9\u5373\u53ef\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"traverse(visitors) {\n    const traverse = require('../index');\n    const defination = types.visitorKeys.get(this.node.type);\n\n    if (defination.visitor) {\n        defination.visitor.forEach(key => {\n            const prop = this.node[key];\n            if (Array.isArray(prop)) { // \u5982\u679c\u8be5\u5c5e\u6027\u662f\u6570\u7ec4\n                prop.forEach((childNode, index) => {\n                    traverse(childNode, visitors, this.node, this);\n                })\n            } else {\n                traverse(prop, visitors, this.node, this);\n            }\n        })\n    }\n}\n")),(0,i.kt)("h4",{id:"pathskip"},"path.skip"),(0,i.kt)("p",null,"skip \u7684\u5b9e\u73b0\u53ef\u4ee5\u7ed9\u8282\u70b9\u52a0\u4e2a\u6807\u8bb0\uff0c\u904d\u5386\u7684\u8fc7\u7a0b\u4e2d\u5982\u679c\u53d1\u73b0\u4e86\u8fd9\u4e2a\u6807\u8bb0\u5c31\u8df3\u8fc7\u5b50\u8282\u70b9\u904d\u5386\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"skip() {\n    this.node.__shouldSkip = true;\n}\n\n\nmodule.exports = function traverse(node, visitors, parent, parentPath, key, listKey) {\n\n    const defination = visitorKeys.get(node.type);\n    let visitorFuncs = visitors[node.type] || {};\n\n    if(typeof visitorFuncs === 'function') {\n        visitorFuncs = {\n            enter: visitorFuncs\n        }\n    }\n    const path = new NodePath(node, parent, parentPath, key, listKey);\n    visitorFuncs.enter && visitorFuncs.enter(path);\n\n    if(node.__shouldSkip) {\n        delete node.__shouldSkip;\n        return;\n    }\n\n    if (defination.visitor) {\n        defination.visitor.forEach(key => {\n            const prop = node[key];\n            if (Array.isArray(prop)) { // \u5982\u679c\u8be5\u5c5e\u6027\u662f\u6570\u7ec4\n                prop.forEach((childNode, index) => {\n                    traverse(childNode, visitors, node, path, key, index);\n                })\n            } else {\n                traverse(prop, visitors, node, path, key);\n            }\n        })\n    }\n    visitorFuncs.exit && visitorFuncs.exit(path);\n}\n")),(0,i.kt)("h4",{id:"pathtostring"},"path.toString"),(0,i.kt)("p",null,"toString \u662f\u628a\u5f53\u524d\u8282\u70b9\u6253\u5370\u6210\u76ee\u6807\u4ee3\u7801\uff0c\u4f1a\u8c03\u7528 generator\uff0cgenerator \u7684\u5b9e\u73b0\u5728\u540e\u9762\u7684\u7ae0\u8282\u4f1a\u8bb2\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"toString() {\n    return generate(this.node).code;\n}\n")),(0,i.kt)("h4",{id:"pathisxxx"},"path.isXxx"),(0,i.kt)("p",null,"\u6211\u4eec\u8bb0\u5f55\u4e86\u4e0d\u540c ast \u600e\u4e48\u904d\u5386\uff0c\u90a3\u4e48\u4e5f\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e9b\u6570\u636e\u5b9e\u73b0\u5404\u79cd\u5224\u65ad AST \u7c7b\u578b\u7684 api\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const validations = {};\n\nfor (let name of astDefinationsMap.keys()) {\n    validations['is' + name] = function (node) {\n        return node.type === name;\n    }\n}\n")),(0,i.kt)("p",null,"\u8fd9\u4e9b\u4f1a\u62bd\u79bb\u5230 types \u5305\u91cc\u9762\uff0c\u7136\u540e\u5728 path \u4e2d\u505a\u76f8\u5e94\u7684\u5c01\u88c5\uff0c\u901a\u8fc7 bind \u7ed9\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2a\u53c2\u6570\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"const types = require('../../types');\n\nclass NodePath {\n    constructor(node, parent, parentPath, key, listKey) {\n        this.node = node;\n        this.parent = parent;\n        this.parentPath = parentPath;\n        this.key = key;\n        this.listKey = listKey;\n\n        Object.keys(types).forEach(key => {\n            if (key.startsWith('is')) {\n                this[key] = types[key].bind(this, node);\n            }\n        })\n    }\n}\n")),(0,i.kt)("p",null,"\u5b9e\u73b0\u4e86\u8fd9\u4e9b API \u4e4b\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 visitor \u91cc\u4f7f\u7528 path \u7684 api \u6765\u64cd\u4f5c ast \u4e86\u3002"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"traverse(ast, {\n    Identifier(path) {\n        if(path.findParent(p => p.isCallExpression())) {\n            path.replaceWith({ type: 'Identifier', name: 'bbbbbbb' });\n        }\n    }\n})\n")),(0,i.kt)("h2",{id:"\u603b\u7ed3"},"\u603b\u7ed3"),(0,i.kt)("p",null,"path \u7684 api \u5c31\u662f\u5bf9 AST \u8fdb\u884c\u589e\u5220\u6539\uff0c\u6211\u4eec\u8bb0\u5f55\u4e86 node\uff08\u5f53\u524d\u8282\u70b9\uff09\u3001parent\uff08\u7236\u8282\u70b9\uff09\u3001parentPath\uff08\u7236 path\uff09 \u7b49\u4fe1\u606f\uff0c\u8fd8\u4f1a\u8bb0\u5f55 key\uff08\u7236\u8282\u70b9\u5c5e\u6027\uff09 \u548c listkey\uff08\u7236\u8282\u70b9\u4e0b\u6807\uff09\u3002\u57fa\u4e8e\u8fd9\u4e9b\u5c31\u53ef\u4ee5\u5b9e\u73b0 replaceWith\u3001remove\u3001find\u3001findParent\u3001skip \u7b49 api\u3002"),(0,i.kt)("p",null,"\uff08\u4ee3\u7801\u5728",(0,i.kt)("a",{parentName:"p",href:"https://github.com/QuarkGluonPlasma/babel-plugin-exercize"},"\u8fd9\u91cc"),"\uff0c\u5efa\u8bae git clone \u4e0b\u6765\u901a\u8fc7 node \u8dd1\u4e00\u4e0b\uff09"))}d.isMDXComponent=!0}}]);